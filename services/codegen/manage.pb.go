// Code generated by protoc-gen-go. DO NOT EDIT.
// source: manage.proto

package manage

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PeerListRequest struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Type                 int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerListRequest) Reset()         { *m = PeerListRequest{} }
func (m *PeerListRequest) String() string { return proto.CompactTextString(m) }
func (*PeerListRequest) ProtoMessage()    {}
func (*PeerListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{0}
}

func (m *PeerListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerListRequest.Unmarshal(m, b)
}
func (m *PeerListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerListRequest.Marshal(b, m, deterministic)
}
func (m *PeerListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerListRequest.Merge(m, src)
}
func (m *PeerListRequest) XXX_Size() int {
	return xxx_messageInfo_PeerListRequest.Size(m)
}
func (m *PeerListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PeerListRequest proto.InternalMessageInfo

func (m *PeerListRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PeerListRequest) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type PeerRequest struct {
	Addr                 string   `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerRequest) Reset()         { *m = PeerRequest{} }
func (m *PeerRequest) String() string { return proto.CompactTextString(m) }
func (*PeerRequest) ProtoMessage()    {}
func (*PeerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{1}
}

func (m *PeerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerRequest.Unmarshal(m, b)
}
func (m *PeerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerRequest.Marshal(b, m, deterministic)
}
func (m *PeerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerRequest.Merge(m, src)
}
func (m *PeerRequest) XXX_Size() int {
	return xxx_messageInfo_PeerRequest.Size(m)
}
func (m *PeerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PeerRequest proto.InternalMessageInfo

func (m *PeerRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type PeerResponse struct {
	Addr                 string   `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Rank                 int32    `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Last                 int64    `protobuf:"varint,3,opt,name=last,proto3" json:"last,omitempty"`
	Server               bool     `protobuf:"varint,4,opt,name=server,proto3" json:"server,omitempty"`
	Online               bool     `protobuf:"varint,5,opt,name=online,proto3" json:"online,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerResponse) Reset()         { *m = PeerResponse{} }
func (m *PeerResponse) String() string { return proto.CompactTextString(m) }
func (*PeerResponse) ProtoMessage()    {}
func (*PeerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{2}
}

func (m *PeerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerResponse.Unmarshal(m, b)
}
func (m *PeerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerResponse.Marshal(b, m, deterministic)
}
func (m *PeerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerResponse.Merge(m, src)
}
func (m *PeerResponse) XXX_Size() int {
	return xxx_messageInfo_PeerResponse.Size(m)
}
func (m *PeerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PeerResponse proto.InternalMessageInfo

func (m *PeerResponse) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *PeerResponse) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *PeerResponse) GetLast() int64 {
	if m != nil {
		return m.Last
	}
	return 0
}

func (m *PeerResponse) GetServer() bool {
	if m != nil {
		return m.Server
	}
	return false
}

func (m *PeerResponse) GetOnline() bool {
	if m != nil {
		return m.Online
	}
	return false
}

type ChainRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChainRequest) Reset()         { *m = ChainRequest{} }
func (m *ChainRequest) String() string { return proto.CompactTextString(m) }
func (*ChainRequest) ProtoMessage()    {}
func (*ChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{3}
}

func (m *ChainRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChainRequest.Unmarshal(m, b)
}
func (m *ChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChainRequest.Marshal(b, m, deterministic)
}
func (m *ChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainRequest.Merge(m, src)
}
func (m *ChainRequest) XXX_Size() int {
	return xxx_messageInfo_ChainRequest.Size(m)
}
func (m *ChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChainRequest proto.InternalMessageInfo

func (m *ChainRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ChainResponse struct {
	Ref                  int64    `protobuf:"varint,1,opt,name=ref,proto3" json:"ref,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Count                uint64   `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChainResponse) Reset()         { *m = ChainResponse{} }
func (m *ChainResponse) String() string { return proto.CompactTextString(m) }
func (*ChainResponse) ProtoMessage()    {}
func (*ChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{4}
}

func (m *ChainResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChainResponse.Unmarshal(m, b)
}
func (m *ChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChainResponse.Marshal(b, m, deterministic)
}
func (m *ChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainResponse.Merge(m, src)
}
func (m *ChainResponse) XXX_Size() int {
	return xxx_messageInfo_ChainResponse.Size(m)
}
func (m *ChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChainResponse proto.InternalMessageInfo

func (m *ChainResponse) GetRef() int64 {
	if m != nil {
		return m.Ref
	}
	return 0
}

func (m *ChainResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ChainResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type BlockRequest struct {
	ChainID              string   `protobuf:"bytes,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	From                 uint64   `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	To                   uint64   `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockRequest) Reset()         { *m = BlockRequest{} }
func (m *BlockRequest) String() string { return proto.CompactTextString(m) }
func (*BlockRequest) ProtoMessage()    {}
func (*BlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{5}
}

func (m *BlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockRequest.Unmarshal(m, b)
}
func (m *BlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockRequest.Marshal(b, m, deterministic)
}
func (m *BlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockRequest.Merge(m, src)
}
func (m *BlockRequest) XXX_Size() int {
	return xxx_messageInfo_BlockRequest.Size(m)
}
func (m *BlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockRequest proto.InternalMessageInfo

func (m *BlockRequest) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *BlockRequest) GetFrom() uint64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *BlockRequest) GetTo() uint64 {
	if m != nil {
		return m.To
	}
	return 0
}

type BlockResponse struct {
	Height               uint64   `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Time                 uint64   `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	PrevHash             string   `protobuf:"bytes,3,opt,name=prevHash,proto3" json:"prevHash,omitempty"`
	Hash                 string   `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	Signature            string   `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	Payload              []byte   `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockResponse) Reset()         { *m = BlockResponse{} }
func (m *BlockResponse) String() string { return proto.CompactTextString(m) }
func (*BlockResponse) ProtoMessage()    {}
func (*BlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{6}
}

func (m *BlockResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockResponse.Unmarshal(m, b)
}
func (m *BlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockResponse.Marshal(b, m, deterministic)
}
func (m *BlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockResponse.Merge(m, src)
}
func (m *BlockResponse) XXX_Size() int {
	return xxx_messageInfo_BlockResponse.Size(m)
}
func (m *BlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BlockResponse proto.InternalMessageInfo

func (m *BlockResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockResponse) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *BlockResponse) GetPrevHash() string {
	if m != nil {
		return m.PrevHash
	}
	return ""
}

func (m *BlockResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BlockResponse) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *BlockResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type ChainCreationRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Author               string   `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Website              string   `protobuf:"bytes,3,opt,name=website,proto3" json:"website,omitempty"`
	Email                string   `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Desc                 string   `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChainCreationRequest) Reset()         { *m = ChainCreationRequest{} }
func (m *ChainCreationRequest) String() string { return proto.CompactTextString(m) }
func (*ChainCreationRequest) ProtoMessage()    {}
func (*ChainCreationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{7}
}

func (m *ChainCreationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChainCreationRequest.Unmarshal(m, b)
}
func (m *ChainCreationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChainCreationRequest.Marshal(b, m, deterministic)
}
func (m *ChainCreationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainCreationRequest.Merge(m, src)
}
func (m *ChainCreationRequest) XXX_Size() int {
	return xxx_messageInfo_ChainCreationRequest.Size(m)
}
func (m *ChainCreationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainCreationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChainCreationRequest proto.InternalMessageInfo

func (m *ChainCreationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChainCreationRequest) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *ChainCreationRequest) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *ChainCreationRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ChainCreationRequest) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type ChainCreationResponse struct {
	Ref                  int64    `protobuf:"varint,1,opt,name=ref,proto3" json:"ref,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Wif                  string   `protobuf:"bytes,3,opt,name=wif,proto3" json:"wif,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChainCreationResponse) Reset()         { *m = ChainCreationResponse{} }
func (m *ChainCreationResponse) String() string { return proto.CompactTextString(m) }
func (*ChainCreationResponse) ProtoMessage()    {}
func (*ChainCreationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{8}
}

func (m *ChainCreationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChainCreationResponse.Unmarshal(m, b)
}
func (m *ChainCreationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChainCreationResponse.Marshal(b, m, deterministic)
}
func (m *ChainCreationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainCreationResponse.Merge(m, src)
}
func (m *ChainCreationResponse) XXX_Size() int {
	return xxx_messageInfo_ChainCreationResponse.Size(m)
}
func (m *ChainCreationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainCreationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChainCreationResponse proto.InternalMessageInfo

func (m *ChainCreationResponse) GetRef() int64 {
	if m != nil {
		return m.Ref
	}
	return 0
}

func (m *ChainCreationResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ChainCreationResponse) GetWif() string {
	if m != nil {
		return m.Wif
	}
	return ""
}

type BlockCreationRequest struct {
	ChainID              string   `protobuf:"bytes,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockCreationRequest) Reset()         { *m = BlockCreationRequest{} }
func (m *BlockCreationRequest) String() string { return proto.CompactTextString(m) }
func (*BlockCreationRequest) ProtoMessage()    {}
func (*BlockCreationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{9}
}

func (m *BlockCreationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockCreationRequest.Unmarshal(m, b)
}
func (m *BlockCreationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockCreationRequest.Marshal(b, m, deterministic)
}
func (m *BlockCreationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockCreationRequest.Merge(m, src)
}
func (m *BlockCreationRequest) XXX_Size() int {
	return xxx_messageInfo_BlockCreationRequest.Size(m)
}
func (m *BlockCreationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockCreationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockCreationRequest proto.InternalMessageInfo

func (m *BlockCreationRequest) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *BlockCreationRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type BlockCreationResponse struct {
	Height               uint64   `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Time                 uint64   `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	PrevHash             string   `protobuf:"bytes,3,opt,name=prevHash,proto3" json:"prevHash,omitempty"`
	Hash                 string   `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	Signature            string   `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockCreationResponse) Reset()         { *m = BlockCreationResponse{} }
func (m *BlockCreationResponse) String() string { return proto.CompactTextString(m) }
func (*BlockCreationResponse) ProtoMessage()    {}
func (*BlockCreationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{10}
}

func (m *BlockCreationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockCreationResponse.Unmarshal(m, b)
}
func (m *BlockCreationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockCreationResponse.Marshal(b, m, deterministic)
}
func (m *BlockCreationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockCreationResponse.Merge(m, src)
}
func (m *BlockCreationResponse) XXX_Size() int {
	return xxx_messageInfo_BlockCreationResponse.Size(m)
}
func (m *BlockCreationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockCreationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BlockCreationResponse proto.InternalMessageInfo

func (m *BlockCreationResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockCreationResponse) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *BlockCreationResponse) GetPrevHash() string {
	if m != nil {
		return m.PrevHash
	}
	return ""
}

func (m *BlockCreationResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BlockCreationResponse) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type CommonResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonResponse) Reset()         { *m = CommonResponse{} }
func (m *CommonResponse) String() string { return proto.CompactTextString(m) }
func (*CommonResponse) ProtoMessage()    {}
func (*CommonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_519fa8ed5ffbbc8f, []int{11}
}

func (m *CommonResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonResponse.Unmarshal(m, b)
}
func (m *CommonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonResponse.Marshal(b, m, deterministic)
}
func (m *CommonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonResponse.Merge(m, src)
}
func (m *CommonResponse) XXX_Size() int {
	return xxx_messageInfo_CommonResponse.Size(m)
}
func (m *CommonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommonResponse proto.InternalMessageInfo

func (m *CommonResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *CommonResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*PeerListRequest)(nil), "manage.PeerListRequest")
	proto.RegisterType((*PeerRequest)(nil), "manage.PeerRequest")
	proto.RegisterType((*PeerResponse)(nil), "manage.PeerResponse")
	proto.RegisterType((*ChainRequest)(nil), "manage.ChainRequest")
	proto.RegisterType((*ChainResponse)(nil), "manage.ChainResponse")
	proto.RegisterType((*BlockRequest)(nil), "manage.BlockRequest")
	proto.RegisterType((*BlockResponse)(nil), "manage.BlockResponse")
	proto.RegisterType((*ChainCreationRequest)(nil), "manage.ChainCreationRequest")
	proto.RegisterType((*ChainCreationResponse)(nil), "manage.ChainCreationResponse")
	proto.RegisterType((*BlockCreationRequest)(nil), "manage.BlockCreationRequest")
	proto.RegisterType((*BlockCreationResponse)(nil), "manage.BlockCreationResponse")
	proto.RegisterType((*CommonResponse)(nil), "manage.CommonResponse")
}

func init() { proto.RegisterFile("manage.proto", fileDescriptor_519fa8ed5ffbbc8f) }

var fileDescriptor_519fa8ed5ffbbc8f = []byte{
	// 652 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xdd, 0x6e, 0x13, 0x3d,
	0x10, 0xd5, 0x26, 0x9b, 0x34, 0x99, 0xa4, 0xfd, 0x2a, 0x7f, 0x69, 0x59, 0x45, 0x05, 0x85, 0xbd,
	0xca, 0x55, 0x55, 0x81, 0x84, 0xa0, 0xbd, 0xa1, 0xa4, 0xa2, 0xb4, 0x14, 0x09, 0xed, 0x1b, 0xb8,
	0xbb, 0xd3, 0xc6, 0x6a, 0xd6, 0x0e, 0xb6, 0xd3, 0xaa, 0x3c, 0x00, 0xf7, 0x3c, 0x03, 0x6f, 0xc1,
	0xd3, 0x21, 0xff, 0x25, 0x9b, 0x28, 0x45, 0x94, 0x1b, 0xee, 0xe6, 0xcc, 0xce, 0x39, 0x33, 0x3e,
	0x13, 0x3b, 0xd0, 0x2d, 0x29, 0xa7, 0xd7, 0xb8, 0x3f, 0x95, 0x42, 0x0b, 0xd2, 0x74, 0x28, 0x3d,
	0x82, 0xff, 0x3e, 0x23, 0xca, 0x0b, 0xa6, 0x74, 0x86, 0x5f, 0x66, 0xa8, 0x34, 0xe9, 0x41, 0x23,
	0x17, 0x33, 0xae, 0x93, 0x68, 0x10, 0x0d, 0x1b, 0x99, 0x03, 0x84, 0x40, 0xac, 0xef, 0xa7, 0x98,
	0xd4, 0x6c, 0xd2, 0xc6, 0xe9, 0x73, 0xe8, 0x18, 0x72, 0x20, 0x12, 0x88, 0x69, 0x51, 0x48, 0xcb,
	0x6b, 0x67, 0x36, 0x4e, 0xbf, 0x42, 0xd7, 0x95, 0xa8, 0xa9, 0xe0, 0x0a, 0xd7, 0xd5, 0x98, 0x9c,
	0xa4, 0xfc, 0x26, 0x48, 0x9b, 0xd8, 0xe4, 0x26, 0x54, 0xe9, 0xa4, 0x3e, 0x88, 0x86, 0xf5, 0xcc,
	0xc6, 0x64, 0x17, 0x9a, 0x0a, 0xe5, 0x2d, 0xca, 0x24, 0x1e, 0x44, 0xc3, 0x56, 0xe6, 0x91, 0xc9,
	0x0b, 0x3e, 0x61, 0x1c, 0x93, 0x86, 0xcb, 0x3b, 0x94, 0x3e, 0x83, 0xee, 0x68, 0x4c, 0x19, 0x0f,
	0xf3, 0x6d, 0x41, 0x8d, 0x15, 0xbe, 0x73, 0x8d, 0x15, 0xe9, 0x29, 0x6c, 0xfa, 0xef, 0x7e, 0xb8,
	0x6d, 0xa8, 0x4b, 0xbc, 0xb2, 0x15, 0xf5, 0xcc, 0x84, 0x9e, 0x52, 0x0b, 0x94, 0x85, 0x37, 0x66,
	0xae, 0xd8, 0x7b, 0x93, 0x5e, 0x40, 0xf7, 0xdd, 0x44, 0xe4, 0x37, 0xa1, 0x51, 0x02, 0x1b, 0xb9,
	0x11, 0x3e, 0x3b, 0xf1, 0xdd, 0x02, 0x34, 0xc7, 0xba, 0x92, 0xa2, 0xb4, 0x8a, 0x71, 0x66, 0x63,
	0xd3, 0x43, 0x0b, 0x2f, 0x58, 0xd3, 0x22, 0xfd, 0x11, 0xc1, 0xa6, 0x97, 0xf3, 0x73, 0xed, 0x42,
	0x73, 0x8c, 0xec, 0x7a, 0xec, 0x56, 0x12, 0x67, 0x1e, 0xd9, 0x9d, 0xb0, 0x12, 0x83, 0x9a, 0x89,
	0x49, 0x1f, 0x5a, 0x53, 0x89, 0xb7, 0x1f, 0xa8, 0x1a, 0x5b, 0xcd, 0x76, 0x36, 0xc7, 0xa6, 0x7e,
	0x6c, 0xf2, 0xb1, 0x33, 0xdf, 0xc4, 0x64, 0x0f, 0xda, 0x8a, 0x5d, 0x73, 0xaa, 0x67, 0xd2, 0xf9,
	0xd7, 0xce, 0x16, 0x09, 0x73, 0x92, 0x29, 0xbd, 0x9f, 0x08, 0x5a, 0x24, 0xcd, 0x41, 0x34, 0xec,
	0x66, 0x01, 0xa6, 0xdf, 0x22, 0xe8, 0x59, 0xf7, 0x46, 0x12, 0xa9, 0x66, 0x82, 0x57, 0x7e, 0x05,
	0x9c, 0x96, 0x18, 0x36, 0x6c, 0x62, 0x73, 0x00, 0x3a, 0xd3, 0x63, 0x21, 0xbd, 0x95, 0x1e, 0x19,
	0xf9, 0x3b, 0xbc, 0x54, 0x4c, 0xa3, 0x9f, 0x35, 0x40, 0x63, 0x34, 0x96, 0x94, 0x4d, 0xfc, 0xac,
	0x0e, 0x18, 0xed, 0x02, 0x55, 0xee, 0xe7, 0xb4, 0x71, 0xfa, 0x11, 0x76, 0x56, 0xe6, 0xf8, 0xe3,
	0x6d, 0x6e, 0x43, 0xfd, 0x8e, 0x5d, 0xf9, 0xd6, 0x26, 0x4c, 0xcf, 0xa1, 0x67, 0xad, 0x5f, 0x3d,
	0xd4, 0xc3, 0x1b, 0xad, 0x38, 0x54, 0x5b, 0x76, 0xe8, 0x7b, 0x04, 0x3b, 0x2b, 0x62, 0xff, 0x7a,
	0x9f, 0xe9, 0x5b, 0xd8, 0x1a, 0x89, 0xb2, 0xac, 0xcc, 0x92, 0xc0, 0x86, 0x9a, 0xe5, 0x39, 0x2a,
	0x65, 0x87, 0x69, 0x65, 0x01, 0xda, 0x15, 0x48, 0x39, 0xdf, 0x99, 0x03, 0x2f, 0x7e, 0x36, 0xa0,
	0x7d, 0xf6, 0x7e, 0xf4, 0xc9, 0x3e, 0x1f, 0xe4, 0x10, 0xda, 0xa7, 0xa8, 0xad, 0xff, 0x8a, 0xf4,
	0xf6, 0xfd, 0x13, 0x53, 0xbd, 0x75, 0xfd, 0x9d, 0x95, 0xac, 0xeb, 0x7b, 0x10, 0x79, 0xae, 0x75,
	0xa8, 0xc2, 0xad, 0x5e, 0xa4, 0x05, 0x77, 0xe9, 0x3e, 0x1c, 0x44, 0xe4, 0x1c, 0x3a, 0xd6, 0x55,
	0xb4, 0xa2, 0x64, 0x6f, 0xa9, 0xc7, 0xca, 0xf2, 0xfa, 0x4f, 0x1f, 0xf8, 0xea, 0x1d, 0x98, 0x6b,
	0xd9, 0x26, 0x0b, 0xad, 0x75, 0x3f, 0x84, 0x85, 0xd6, 0xfa, 0xcd, 0xbe, 0x86, 0xd6, 0x71, 0x51,
	0xb8, 0xa1, 0xd6, 0xdb, 0xb1, 0x3b, 0xcf, 0x2e, 0xef, 0xe1, 0x08, 0x3a, 0x27, 0x38, 0xc1, 0x70,
	0xa2, 0xc7, 0x92, 0x5b, 0xa7, 0xa8, 0xcd, 0x43, 0xab, 0xc8, 0x93, 0x50, 0xb3, 0xf2, 0xae, 0xf7,
	0x7b, 0xd5, 0x0f, 0x15, 0x2f, 0x5f, 0xc1, 0xc6, 0x71, 0x51, 0x98, 0x24, 0xf9, 0x7f, 0xb9, 0xe4,
	0xf7, 0x4d, 0x0f, 0xa1, 0x33, 0x12, 0x9c, 0x63, 0xae, 0xff, 0x8a, 0x7b, 0xc2, 0x54, 0x2e, 0x38,
	0x7f, 0x3c, 0xf7, 0x0d, 0x80, 0x73, 0xea, 0xd1, 0xd4, 0xcb, 0xa6, 0xfd, 0xf3, 0x7b, 0xf9, 0x2b,
	0x00, 0x00, 0xff, 0xff, 0x30, 0x2b, 0x60, 0xd0, 0x0c, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IFCManageClient is the client API for IFCManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IFCManageClient interface {
	GetChains(ctx context.Context, in *ChainRequest, opts ...grpc.CallOption) (IFCManage_GetChainsClient, error)
	GetBlocks(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (IFCManage_GetBlocksClient, error)
	CreateChain(ctx context.Context, in *ChainCreationRequest, opts ...grpc.CallOption) (*ChainCreationResponse, error)
	CreateBlock(ctx context.Context, in *BlockCreationRequest, opts ...grpc.CallOption) (*BlockCreationResponse, error)
	AddChain(ctx context.Context, in *ChainRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	DeleteChain(ctx context.Context, in *ChainRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	GetPeers(ctx context.Context, in *PeerListRequest, opts ...grpc.CallOption) (IFCManage_GetPeersClient, error)
	AddPeer(ctx context.Context, in *PeerRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	ConnectPeer(ctx context.Context, in *PeerRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	DisconnPeer(ctx context.Context, in *PeerRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	DeletePeer(ctx context.Context, in *PeerRequest, opts ...grpc.CallOption) (*CommonResponse, error)
}

type iFCManageClient struct {
	cc *grpc.ClientConn
}

func NewIFCManageClient(cc *grpc.ClientConn) IFCManageClient {
	return &iFCManageClient{cc}
}

func (c *iFCManageClient) GetChains(ctx context.Context, in *ChainRequest, opts ...grpc.CallOption) (IFCManage_GetChainsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IFCManage_serviceDesc.Streams[0], "/manage.IFCManage/GetChains", opts...)
	if err != nil {
		return nil, err
	}
	x := &iFCManageGetChainsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IFCManage_GetChainsClient interface {
	Recv() (*ChainResponse, error)
	grpc.ClientStream
}

type iFCManageGetChainsClient struct {
	grpc.ClientStream
}

func (x *iFCManageGetChainsClient) Recv() (*ChainResponse, error) {
	m := new(ChainResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iFCManageClient) GetBlocks(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (IFCManage_GetBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IFCManage_serviceDesc.Streams[1], "/manage.IFCManage/GetBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &iFCManageGetBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IFCManage_GetBlocksClient interface {
	Recv() (*BlockResponse, error)
	grpc.ClientStream
}

type iFCManageGetBlocksClient struct {
	grpc.ClientStream
}

func (x *iFCManageGetBlocksClient) Recv() (*BlockResponse, error) {
	m := new(BlockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iFCManageClient) CreateChain(ctx context.Context, in *ChainCreationRequest, opts ...grpc.CallOption) (*ChainCreationResponse, error) {
	out := new(ChainCreationResponse)
	err := c.cc.Invoke(ctx, "/manage.IFCManage/CreateChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iFCManageClient) CreateBlock(ctx context.Context, in *BlockCreationRequest, opts ...grpc.CallOption) (*BlockCreationResponse, error) {
	out := new(BlockCreationResponse)
	err := c.cc.Invoke(ctx, "/manage.IFCManage/CreateBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iFCManageClient) AddChain(ctx context.Context, in *ChainRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/manage.IFCManage/AddChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iFCManageClient) DeleteChain(ctx context.Context, in *ChainRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/manage.IFCManage/DeleteChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iFCManageClient) GetPeers(ctx context.Context, in *PeerListRequest, opts ...grpc.CallOption) (IFCManage_GetPeersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IFCManage_serviceDesc.Streams[2], "/manage.IFCManage/GetPeers", opts...)
	if err != nil {
		return nil, err
	}
	x := &iFCManageGetPeersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IFCManage_GetPeersClient interface {
	Recv() (*PeerResponse, error)
	grpc.ClientStream
}

type iFCManageGetPeersClient struct {
	grpc.ClientStream
}

func (x *iFCManageGetPeersClient) Recv() (*PeerResponse, error) {
	m := new(PeerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iFCManageClient) AddPeer(ctx context.Context, in *PeerRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/manage.IFCManage/AddPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iFCManageClient) ConnectPeer(ctx context.Context, in *PeerRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/manage.IFCManage/ConnectPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iFCManageClient) DisconnPeer(ctx context.Context, in *PeerRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/manage.IFCManage/DisconnPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iFCManageClient) DeletePeer(ctx context.Context, in *PeerRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/manage.IFCManage/DeletePeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IFCManageServer is the server API for IFCManage service.
type IFCManageServer interface {
	GetChains(*ChainRequest, IFCManage_GetChainsServer) error
	GetBlocks(*BlockRequest, IFCManage_GetBlocksServer) error
	CreateChain(context.Context, *ChainCreationRequest) (*ChainCreationResponse, error)
	CreateBlock(context.Context, *BlockCreationRequest) (*BlockCreationResponse, error)
	AddChain(context.Context, *ChainRequest) (*CommonResponse, error)
	DeleteChain(context.Context, *ChainRequest) (*CommonResponse, error)
	GetPeers(*PeerListRequest, IFCManage_GetPeersServer) error
	AddPeer(context.Context, *PeerRequest) (*CommonResponse, error)
	ConnectPeer(context.Context, *PeerRequest) (*CommonResponse, error)
	DisconnPeer(context.Context, *PeerRequest) (*CommonResponse, error)
	DeletePeer(context.Context, *PeerRequest) (*CommonResponse, error)
}

func RegisterIFCManageServer(s *grpc.Server, srv IFCManageServer) {
	s.RegisterService(&_IFCManage_serviceDesc, srv)
}

func _IFCManage_GetChains_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChainRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IFCManageServer).GetChains(m, &iFCManageGetChainsServer{stream})
}

type IFCManage_GetChainsServer interface {
	Send(*ChainResponse) error
	grpc.ServerStream
}

type iFCManageGetChainsServer struct {
	grpc.ServerStream
}

func (x *iFCManageGetChainsServer) Send(m *ChainResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _IFCManage_GetBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IFCManageServer).GetBlocks(m, &iFCManageGetBlocksServer{stream})
}

type IFCManage_GetBlocksServer interface {
	Send(*BlockResponse) error
	grpc.ServerStream
}

type iFCManageGetBlocksServer struct {
	grpc.ServerStream
}

func (x *iFCManageGetBlocksServer) Send(m *BlockResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _IFCManage_CreateChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IFCManageServer).CreateChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.IFCManage/CreateChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IFCManageServer).CreateChain(ctx, req.(*ChainCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IFCManage_CreateBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IFCManageServer).CreateBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.IFCManage/CreateBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IFCManageServer).CreateBlock(ctx, req.(*BlockCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IFCManage_AddChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IFCManageServer).AddChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.IFCManage/AddChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IFCManageServer).AddChain(ctx, req.(*ChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IFCManage_DeleteChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IFCManageServer).DeleteChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.IFCManage/DeleteChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IFCManageServer).DeleteChain(ctx, req.(*ChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IFCManage_GetPeers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PeerListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IFCManageServer).GetPeers(m, &iFCManageGetPeersServer{stream})
}

type IFCManage_GetPeersServer interface {
	Send(*PeerResponse) error
	grpc.ServerStream
}

type iFCManageGetPeersServer struct {
	grpc.ServerStream
}

func (x *iFCManageGetPeersServer) Send(m *PeerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _IFCManage_AddPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IFCManageServer).AddPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.IFCManage/AddPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IFCManageServer).AddPeer(ctx, req.(*PeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IFCManage_ConnectPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IFCManageServer).ConnectPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.IFCManage/ConnectPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IFCManageServer).ConnectPeer(ctx, req.(*PeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IFCManage_DisconnPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IFCManageServer).DisconnPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.IFCManage/DisconnPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IFCManageServer).DisconnPeer(ctx, req.(*PeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IFCManage_DeletePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IFCManageServer).DeletePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.IFCManage/DeletePeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IFCManageServer).DeletePeer(ctx, req.(*PeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IFCManage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manage.IFCManage",
	HandlerType: (*IFCManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChain",
			Handler:    _IFCManage_CreateChain_Handler,
		},
		{
			MethodName: "CreateBlock",
			Handler:    _IFCManage_CreateBlock_Handler,
		},
		{
			MethodName: "AddChain",
			Handler:    _IFCManage_AddChain_Handler,
		},
		{
			MethodName: "DeleteChain",
			Handler:    _IFCManage_DeleteChain_Handler,
		},
		{
			MethodName: "AddPeer",
			Handler:    _IFCManage_AddPeer_Handler,
		},
		{
			MethodName: "ConnectPeer",
			Handler:    _IFCManage_ConnectPeer_Handler,
		},
		{
			MethodName: "DisconnPeer",
			Handler:    _IFCManage_DisconnPeer_Handler,
		},
		{
			MethodName: "DeletePeer",
			Handler:    _IFCManage_DeletePeer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetChains",
			Handler:       _IFCManage_GetChains_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBlocks",
			Handler:       _IFCManage_GetBlocks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPeers",
			Handler:       _IFCManage_GetPeers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "manage.proto",
}
